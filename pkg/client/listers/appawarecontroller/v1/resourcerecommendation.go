/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	v1 "k8s.io/application-aware-controller/pkg/apis/appawarecontroller/v1"
	"k8s.io/client-go/tools/cache"
)

// ResourceRecommendationLister helps list ResourceRecommendations.
// All objects returned here must be treated as read-only.
type ResourceRecommendationLister interface {
	// List lists all ResourceRecommendations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ResourceRecommendation, err error)
	// ResourceRecommendations returns an object that can list and get ResourceRecommendations.
	ResourceRecommendations(namespace string) ResourceRecommendationNamespaceLister
	ResourceRecommendationListerExpansion
}

// resourceRecommendationLister implements the ResourceRecommendationLister interface.
type resourceRecommendationLister struct {
	indexer cache.Indexer
}

// NewResourceRecommendationLister returns a new ResourceRecommendationLister.
func NewResourceRecommendationLister(indexer cache.Indexer) ResourceRecommendationLister {
	return &resourceRecommendationLister{indexer: indexer}
}

// List lists all ResourceRecommendations in the indexer.
func (s *resourceRecommendationLister) List(selector labels.Selector) (ret []*v1.ResourceRecommendation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ResourceRecommendation))
	})
	return ret, err
}

// ResourceRecommendations returns an object that can list and get ResourceRecommendations.
func (s *resourceRecommendationLister) ResourceRecommendations(namespace string) ResourceRecommendationNamespaceLister {
	return resourceRecommendationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResourceRecommendationNamespaceLister helps list and get ResourceRecommendations.
// All objects returned here must be treated as read-only.
type ResourceRecommendationNamespaceLister interface {
	// List lists all ResourceRecommendations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ResourceRecommendation, err error)
	// Get retrieves the ResourceRecommendation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ResourceRecommendation, error)
	ResourceRecommendationNamespaceListerExpansion
}

// resourceRecommendationNamespaceLister implements the ResourceRecommendationNamespaceLister
// interface.
type resourceRecommendationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResourceRecommendations in the indexer for a given namespace.
func (s resourceRecommendationNamespaceLister) List(selector labels.Selector) (ret []*v1.ResourceRecommendation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ResourceRecommendation))
	})
	return ret, err
}

// Get retrieves the ResourceRecommendation from the indexer for a given namespace and name.
func (s resourceRecommendationNamespaceLister) Get(name string) (*v1.ResourceRecommendation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("resourcerecommendation"), name)
	}
	return obj.(*v1.ResourceRecommendation), nil
}
